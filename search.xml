<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript Note</title>
    <url>/posts/fbbf86b6/</url>
    <content><![CDATA[<h2 id="词法结构"><a href="#词法结构" class="headerlink" title="词法结构"></a><strong>词法结构</strong></h2><hr>
<p>标识符必须以字母&#x2F;下划线&#x2F;美元符号开头</p>
<span id="more"></span>

<h2 id="类型-x2F-值-x2F-变量"><a href="#类型-x2F-值-x2F-变量" class="headerlink" title="类型&#x2F;值&#x2F;变量"></a><strong>类型&#x2F;值&#x2F;变量</strong></h2><hr>
<ul>
<li>原始类型：数值&#x2F;文本字符串&#x2F;布尔真值&#x2F;符号&#x2F;null&#x2F;undefined</li>
<li>对象类型</li>
</ul>
<p>javascript可以自由地转换不同类型的值<br>javascript预定义了全局常量Infinity和NaN以应对正无穷和非数值<br>var声明的一个最不同寻常的特性是作用域提升</p>
<h2 id="表达式与操作符"><a href="#表达式与操作符" class="headerlink" title="表达式与操作符"></a><strong>表达式与操作符</strong></h2><hr>
<p>[] &#x2F;&#x2F; 空数组</p>
<p>条件式属性访问</p>
<ul>
<li>expression ?. identifier</li>
<li>expression ?.[ expression ]</li>
</ul>
<p>如果expression非真，问号后面的表达式不会执行，即短路操作<br>+偏向字符串，即只要有一个操作数是字符串，它就会执行拼接操作；比较操作符偏向数值，只有两个操作数均为字符串时才按字符串处理，如果有一个操作数是NaN，则4个比较操作符都返回false<br>in操作数期待左侧操作数是字符串&#x2F;符号&#x2F;可以转换为字符串的值，期待右侧操作数是对象。<br>instanceof的右侧操作数应该是一个函数<br>??先定义：第一个操作数求值为null或undefined时才会求值第二个操作数</p>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a><strong>语句</strong></h2><hr>
<p>for&#x2F;of循环专门用于可迭代对象，包括数组&#x2F;字符串&#x2F;集合&#x2F;映射。</p>
<p>for&#x2F;in循环in后面可以是任意对象</p>
<ul>
<li>不会枚举对象的所有属性，比如名字为符号的属性</li>
<li>名字为字符串的属性，只会遍历可枚举属性</li>
<li>javascript核心定义的各种内部方法是不可枚举的</li>
<li>继承的可枚举属性也可被for&#x2F;in循环枚举</li>
</ul>
<p>语句标签<br>identifier：statement</p>
<ul>
<li>break [labelname];</li>
<li>continue [labelname];<ul>
<li>labelname 属于可选参数</li>
</ul>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><strong>对象</strong></h2><hr>
<p>创建对象三种方式：</p>
<ol>
<li>对象字面量</li>
<li>使用new创建对象</li>
<li>Object.create()–防止对象被某个第三方库函数意外修改</li>
</ol>
<p><strong>几乎所有对象都有原型，但大多数对象没有<em>prototype</em>属性</strong></p>
<p>in可以区分不存在的属性和存在但被设置为undefined的属性</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><hr>
<p>扩展操作符(…)在一个数组字面量中包含另一个数组的元素</p>
<p><strong>实际上并不是操作符，因为只能在数组字面量和本书后面介绍的函数调用中使用它们</strong></p>
<p>Array()构造函数传入一个数组参数，指定长度：<br>let a &#x3D; new Array(10);  &#x2F;&#x2F; 创建长度为10的空数组<br>Array.of()可以创建只包含一个元素的数组：<br>Array.of(10)    &#x2F;&#x2F; &#x3D;&gt; [10];可以创建只有一个数值元素的数组</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><hr>
<p>函数声明语句会被“提升”到包含脚本&#x2F;函数&#x2F;代码块的顶部，因此调用以这种方式定义的函数时，调用代码可以出现在函数定义代码之前</p>
<p>箭头函数</p>
<ul>
<li>从定义自己的环境继承this关键字的值</li>
</ul>
<p>嵌套函数</p>
<ul>
<li>内层函数可以访问包含自己的函数（或更外层函数）的参数和变量</li>
</ul>
<p>调用函数的五种方式：</p>
<ol>
<li>作为函数<ul>
<li>通过调用表达式被作为函数或方法调用</li>
</ul>
</li>
<li>作为方法<ul>
<li>即函数，只不过它保存为对象的属性而已</li>
</ul>
</li>
<li>作为构造函数<ul>
<li>使用new关键字调用的函数</li>
</ul>
</li>
<li>透过call() 或 apply() 方法间接调用</li>
<li>通过JavaScript 语言特性隐形调用</li>
</ol>
<p><strong>JavaScript函数定义不指定函数形参类型，函数调用不对传入实参进行类型&#x2F;个数检查</strong></p>
<p>函数可以有属性<br>闭包：能捕获自身定义所在函数的局部变量（及参数）绑定</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h2><hr>
<p><strong>只有函数对象才有prototype属性</strong>，这意味着使用同一个构造函数创建的所有对象都继承同一个对象，因而是同一个类的成员</p>
<ul>
<li>类名（按照惯例）应以大写字母开头</li>
<li>普通函数和方法的名字则以小写字母开头</li>
</ul>
<p><strong>新对象是在调用构造函数之前自动创建的</strong></p>
<p>与函数声明不同，类声明不会“提升”<br>原型对象是类标识的基本：当且仅当两个对象继承同一个原型对象时，他们才是同一个类的实例<br>每个普通 JavaScript 函数自动拥有一个 prototype 属性，这个属性的值是一个对象，有一个不可枚举的constructor 属性，而这个属性的值就是该函数的对象</p>
<p>eg:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> F = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;  <span class="comment">// 这是一个函数对象</span></span><br><span class="line"><span class="keyword">let</span> p = F.<span class="property"><span class="keyword">prototype</span></span>;    <span class="comment">// 这是一个与F关联的原型对象</span></span><br><span class="line"><span class="keyword">let</span> c = p.<span class="property">constructor</span>;  <span class="comment">// 这是与原型关联的函数</span></span><br><span class="line">c === F                 <span class="comment">// =&gt; true: 对任何F，F.prototype.constructor === F</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%AE%9E%E4%BE%8B.svg" alt="构造函数及其原型和实例"></p>
<p>ES6新增了class 关键字，让定义类更方便。但在底层，仍然是构造函数和原型机制在起作用<br>子类在类声明中通过extends关键字定义<br>子类可以通过super 关键字调用父类构造函数或父类中被覆盖的方法</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><strong>模块</strong></h2><hr>
<p>模块化的目标是让程序员隐藏自己代码的实现细节，从而让不同来源的代码块可以组装成一个大型程序，又不必担心某个代码块会重写其他代码块的函数或变量。本章解释了三种不同的JavaScript模块系统：</p>
<ul>
<li><p>在JavaScript早期，模块化只能通过巧妙地使用立即调用的函数表达式来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">BitSet</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;  <span class="comment">// 将 BitSet 设置为这个函数的返回值</span></span><br><span class="line">  ... <span class="comment">// 省略实现</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">BitSet</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractWritableSet</span> &#123;</span><br><span class="line">    ... <span class="comment">// 省略实现</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例2：</span></span><br><span class="line"><span class="keyword">const</span> stats = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">mean</span>(<span class="params">data</span>) &#123; ... &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">stddev</span>(<span class="params">data</span>) &#123; ... &#125;;</span><br><span class="line">  <span class="comment">// 将公有函数作为一个对象的属性导出出来</span></span><br><span class="line">  <span class="keyword">return</span> &#123; mean, stddev &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
</li>
<li><p>Node 在 JavaScript 语言之上加入了自己的模块系统。Node 模块通过require() 导入，并通过设置 Exports 对象的属性或直接设置 module.exports 属性来定义导出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Node 导出</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mean</span> = data =&gt; &#123; ... &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stddev</span> = data =&gt; &#123; ... &#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; mean, stddev &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node 导入</span></span><br><span class="line"><span class="comment">// 内置模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line"><span class="keyword">const</span> stats = <span class="built_in">require</span>(<span class="string">&#x27;./stats.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值导入特定属性</span></span><br><span class="line"><span class="keyword">const</span> &#123; stddev &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./stats.js&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在ES6 中，Javascript 终于有了自己依托import 和 export关键字的模块系统，ES2020 又通过 import() 增加了对动态导入的支持</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="title class_">Math</span>.<span class="property">PI</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; mean, stddev &#125; <span class="keyword">from</span> <span class="string">&#x27;./stats.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> stats <span class="keyword">from</span> <span class="string">&#x27;./stats.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import() 动态导入</span></span><br><span class="line"><span class="title function_">import</span>(<span class="string">&quot;./stats.js&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">stats</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> average = stats.<span class="title function_">mean</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="JavaScript-标准库"><a href="#JavaScript-标准库" class="headerlink" title="JavaScript 标准库"></a><strong>JavaScript 标准库</strong></h2><hr>
<p>主要包括以下内容：</p>
<ol>
<li>重要的数据结构，如Set&#x2F;Map和定型数组</li>
<li>用于操作日期和URL的Date与URL类</li>
<li>JavaScript的正则表达式语法及处理文本模式匹配的RegExp类</li>
<li>JavaScript的国际化库，可以格式化日期&#x2F;时间&#x2F;数值&#x2F;以及排序字符串</li>
<li>序列化和反序列化简单数据结构的JSON对象，以及用于打印消息的console对象</li>
</ol>
<h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a><strong>迭代器与生成器</strong></h2><hr>
<p><strong>可迭代对象</strong>：任何具有专用迭代器方法，且该方法返回迭代器对象的对象<br><strong>迭代器对象</strong>：任何具有next()方法，且该方法返回迭代结果对象的对象<br><strong>迭代结果对象</strong>：具有value和done的对象</p>
<div class="note danger"><p><em><strong>内置可迭代数据类型的迭代器对象本身也是可迭代的</strong></em>（即，有一个名为Symbol.iterator的方法，返回他们自己）</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// words函数是一个可迭代对象，返回一个迭代器对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">words</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="regexp">/\s+|$/g</span>;</span><br><span class="line">    r.<span class="property">lastIndex</span> = s.<span class="title function_">match</span>(<span class="regexp">/[^ ]/</span>).<span class="property">index</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> start = r.<span class="property">lastIndex</span>;</span><br><span class="line">            <span class="keyword">if</span> (start &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> match = r.<span class="title function_">exec</span>(s);</span><br><span class="line">                <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: s.<span class="title function_">substring</span>(start, match.<span class="property">index</span>)&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="title function_">words</span>(<span class="string">&quot; abc def ghi! &quot;</span>)]); <span class="comment">// =&gt; [ &#x27;abc&#x27;, &#x27;def&#x27;, &#x27;ghi!&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p>生成器函数：使用function*</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fib</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="keyword">yield</span> y;</span><br><span class="line">        [x, y] = [y, x + y] <span class="comment">// 解构赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>yield*: 与yield类似，但它不是只回送一个值，而是迭代可迭代对象并返回送得的每个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use yield</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">sequence</span>(<span class="params">...iterables</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> iterable <span class="keyword">of</span> iterables) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">            <span class="keyword">yield</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="title function_">sequence</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;efg&quot;</span>)]); <span class="comment">// =&gt; [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use yield*</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">sequence</span>(<span class="params">...iterables</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> iterable <span class="keyword">of</span> iterables) &#123;</span><br><span class="line">        <span class="keyword">yield</span>* iterable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="title function_">sequence</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;efg&quot;</span>)]); <span class="comment">// =&gt; [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h2 id="异步JavaScript"><a href="#异步JavaScript" class="headerlink" title="异步JavaScript"></a><strong>异步JavaScript</strong></h2><hr>
<p>传统异步操作采用事件和回调函数的方式执行</p>
<mark class="label primary">回调</mark> vs <mark class="label success">期约(promise)</mark> 

<table>
<thead>
<tr>
<th>回调</th>
<th>期约(promise)</th>
</tr>
</thead>
<tbody><tr>
<td>回调常会引发多层嵌套代码，照成缩进过多以致难以阅读和维护</td>
<td>期约可以以一种更线性的期约链形式表现，更易读和推断</td>
</tr>
<tr>
<td>回调难以处理错误，异常没有办法传播到异常操作的发起者</td>
<td>期约标准化了异步错误处理，使用期约链提供了一种让错误正确传播的途径</td>
</tr>
</tbody></table>
<p><strong>期约链</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(documentURL)                      <span class="comment">// 发送 http 请求</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())  <span class="comment">// 获取 JSON 格式的响应体</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">document</span> =&gt;</span> &#123;                 <span class="comment">// 在取得解析后的JSON时把文档显示给用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">render</span>(<span class="variable language_">document</span>);</span><br><span class="line">    &#125;) </span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">rendered</span> =&gt;</span> &#123;                 <span class="comment">// 在取得渲染的文档后缓存在本地数据库中</span></span><br><span class="line">        <span class="title function_">cacheInDatebase</span>(rendered);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">handle</span>(error));     <span class="comment">// 处理发生的错误</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 并行期约</span></span><br><span class="line"><span class="keyword">const</span> urls = [ <span class="comment">/* 零或多个URL */</span> ];</span><br><span class="line">promises = urls.<span class="title function_">map</span>(<span class="function"><span class="params">url</span> =&gt;</span> <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">text</span>()));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">bodies</span> =&gt;</span> &#123; <span class="comment">/* 处理得到的字符串数组 */</span> &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 串行期约</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promiseSequence</span>(<span class="params">inputs, promiseMaker</span>) &#123;</span><br><span class="line">    inputs = [...inputs];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleNextInput</span>(<span class="params">outputs</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> outputs;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> nextInput = inputs.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">promiseMaker</span>()</span><br><span class="line">                    .<span class="title function_">then</span>(<span class="function"><span class="params">output</span> =&gt;</span> outputs.<span class="title function_">concat</span>(output))</span><br><span class="line">                    .<span class="title function_">then</span>(handleNextInput);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>([]).<span class="title function_">then</span>(handleNextInput);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchBody</span>(<span class="params">url</span>) &#123; <span class="keyword">return</span> <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">text</span>()); &#125;</span><br><span class="line"><span class="title function_">promiseSequence</span>(urls, fetchBody)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">bodies</span> =&gt;</span> &#123; <span class="comment">/* 处理字符串数组 */</span> &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure>

<p><strong>async &amp; await</strong></p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">await</a><br>await  操作符用于等待一个Promise 对象<br>[返回值] &#x3D; await 表达式;</p>
</blockquote>
<ul>
<li>表达式<br>一个 Promise 对象或者任何要等待的值。</li>
</ul>
<p><strong>返回值</strong><br>返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">async</a><br>async函数是使用async关键字声明的函数。 async函数是AsyncFunction构造函数的实例， 并且其中允许使用await关键字。<br>async function name([param[, param[, … param]]]) {<br>    statements<br>}</p>
</blockquote>
<ul>
<li>name<br>函数名称。</li>
<li>param<br>要传递给函数的参数的名称。</li>
<li>statements</li>
</ul>
<p>包含函数主体的表达式。可以使用await机制。<br><strong>返回值</strong><br>一个Promise，这个promise要么会通过一个由async函数返回的值被解决，要么会通过一个从async函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAfter2Seconds</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(x);</span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="keyword">await</span> <span class="title function_">resolveAfter2Seconds</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">output</span>：</span><br><span class="line">hello</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><strong>for&#x2F;await 循环</strong><br>异步迭代器会产生一个期约，for&#x2F;await 循环会等待该期约兑现，将兑现值赋给循环变量，然后再运行循环体</p>
<p>异步迭代器(Symbol.asyncIterator)</p>
<p>异步生成器(async function *)<br>设置[Symbol.asyncIterator]属性来自定义异步可迭代对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myAsyncIterable = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">myAsyncIterable[<span class="title class_">Symbol</span>.<span class="property">asyncIterator</span>] = <span class="keyword">async</span> <span class="keyword">function</span>*() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;async&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;iteration!&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> x <span class="keyword">of</span> myAsyncIterable) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">        <span class="comment">// expected output:</span></span><br><span class="line">        <span class="comment">//    &quot;hello&quot;</span></span><br><span class="line">        <span class="comment">//    &quot;async&quot;</span></span><br><span class="line">        <span class="comment">//    &quot;iteration!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a><strong>元编程</strong></h2><hr>
<p><strong>属性特性</strong></p>
<ul>
<li>可写：修改属性的值</li>
<li>可枚举：for&#x2F;in循环和 Object.keys() 方法枚举属性</li>
<li>可配置：可以删除属性&#x2F;修改属性</li>
</ul>
<p>模板标签：位于反引号之间的字符串被称为“模板字面量”</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Meta_programming">反射API &amp; 代理对象</a></p>
<blockquote>
<p>允许你拦截并定义基本语言操作的自定义行为（例如，属性查找，赋值，枚举，函数调用等）</p>
</blockquote>
<h2 id="浏览器中的JavaScript"><a href="#浏览器中的JavaScript" class="headerlink" title="浏览器中的JavaScript"></a><strong>浏览器中的JavaScript</strong></h2><hr>
<ul>
<li>JavaScript异步&#x2F;事件驱动的编程模型</li>
<li>DOM API是所有客户端JavaScript编程的核心</li>
<li>CSS样式</li>
<li>svg &amp; <code>&lt;canvas&gt;</code> 生成动态图像</li>
<li>audio &amp; video</li>
<li>location &amp; history</li>
<li>http &amp; websocket 协议与web服务器交换数据</li>
<li>local cache<ul>
<li>web storage</li>
<li>cookie</li>
<li>indexedDB</li>
</ul>
</li>
<li>worker thread</li>
</ul>
<h2 id="Node服务器端JavaScript"><a href="#Node服务器端JavaScript" class="headerlink" title="Node服务器端JavaScript"></a><strong><a href="https://nodejs.org/en/">Node</a>服务器端JavaScript</strong></h2><hr>
<h2 id="JavaScript工具和扩展"><a href="#JavaScript工具和扩展" class="headerlink" title="JavaScript工具和扩展"></a><strong>JavaScript工具和扩展</strong></h2><hr>
<p>工具和语言扩展：</p>
<ul>
<li><a href="http://eslint.cn/">ESLint</a>(辅助发现代码中潜藏的缺陷和风格问题)</li>
<li><a href="https://www.prettier.cn/">Prettier</a>(格式化js代码)</li>
<li>Jest(js单元测试的一站式解决方案)</li>
<li>npm</li>
<li>webpack &amp; Rollup &amp; Parcel</li>
<li>Babel(转义工具)</li>
<li>JSX(语言扩展，使用类似HTML标记的js表达式描述用户界面)</li>
<li>Flow(添加类型注解，通过类型检查保证类型安全)</li>
</ul>
]]></content>
      <categories>
        <category>computer language</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>vim tutorial</title>
    <url>/posts/9e9a6725/</url>
    <content><![CDATA[<div class="note info"><h2 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><p>本文内容摘自vimtutor教程，做个汇总方便查阅(●’◡’●)</p>
</div>

<span id="more"></span>

<h2 id="第一讲小结"><a href="#第一讲小结" class="headerlink" title="第一讲小结"></a><strong>第一讲小结</strong></h2><hr>
<ol>
<li><p>光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。<br>h (左移)    j (下行)       k (上行)        l (右移)</p>
</li>
<li><p>欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</p>
</li>
<li><p>欲退出 Vim 编辑器，请输入 <code>&lt;ESC&gt;</code>   :q!   &lt;回车&gt; 放弃所有改动。<br>             或者输入 <code>&lt;ESC&gt;</code>   :wq   &lt;回车&gt; 保存改动。</p>
</li>
<li><p>在正常模式下删除光标所在位置的字符，请按： x</p>
</li>
<li><p>欲插入或添加文本，请输入：</p>
<p>i   输入欲插入文本   <code>&lt;ESC&gt;</code>        在光标前插入文本<br>A   输入欲添加文本   <code>&lt;ESC&gt;</code>             在一行后添加文本</p>
</li>
</ol>
<p>特别提示：按下 <code>&lt;ESC&gt;</code> 键会带您回到正常模式或者撤消一个不想输入或部分完整<br>的命令。</p>
<h2 id="第二讲小结"><a href="#第二讲小结" class="headerlink" title="第二讲小结"></a><strong>第二讲小结</strong></h2><hr>
<ol>
<li><p>欲从当前光标删除至下一个单词，请输入：dw</p>
</li>
<li><p>欲从当前光标删除至当前行末尾，请输入：d$</p>
</li>
<li><p>欲删除整行，请输入：dd</p>
</li>
<li><p>欲重复一个动作，请在它前面加上一个数字：2w</p>
</li>
<li><p>在正常模式下修改命令的格式是：<br>      operator   [number]   motion<br>其中：<br>  operator - 操作符，代表要做的事情，比如 d 代表删除<br>  [number] - 可以附加的数字，代表动作重复的次数<br>  motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，<br> $ 代表行末等等。</p>
</li>
<li><p>欲移动光标到行首，请按数字0键：0</p>
</li>
<li><p>欲撤消以前的操作，请输入：u (小写的u)<br>欲撤消在一行中所做的改动，请输入：U (大写的U)<br>欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R</p>
</li>
</ol>
<h2 id="第三讲小结"><a href="#第三讲小结" class="headerlink" title="第三讲小结"></a><strong>第三讲小结</strong></h2><hr>
<ol>
<li><p>要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除<br>的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置<br>于当前光标所在行的下一行。</p>
</li>
<li><p>要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字<br>符即可。</p>
</li>
<li><p>更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。<br>比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当<br>前光标到行末的内容。</p>
</li>
<li><p>更改类命令的格式是：</p>
<p>c   [number]   motion</p>
</li>
</ol>
<h2 id="第四讲小结"><a href="#第四讲小结" class="headerlink" title="第四讲小结"></a><strong>第四讲小结</strong></h2><hr>
<ol>
<li><p>CTRL-G 用于显示当前光标所在位置和文件状态信息。<br>G 用于将光标跳转至文件最后一行。<br>先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。<br>gg 用于将光标跳转至文件第一行。</p>
</li>
<li><p>输入 &#x2F; 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。<br>输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。<br>完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查<br>找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。<br>CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。</p>
</li>
<li><p>如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。</p>
</li>
<li><p>在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s&#x2F;old&#x2F;new<br>在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s&#x2F;old&#x2F;new&#x2F;g<br>在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s&#x2F;old&#x2F;new&#x2F;g<br>在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s&#x2F;old&#x2F;new&#x2F;g<br>进行全文替换时询问用户确认每个替换需添加 c 标志        :%s&#x2F;old&#x2F;new&#x2F;gc</p>
</li>
</ol>
<h2 id="第五讲小结"><a href="#第五讲小结" class="headerlink" title="第五讲小结"></a><strong>第五讲小结</strong></h2><hr>
<ol>
<li><p>:!command 用于执行一个外部命令 command。</p>
<p>请看一些实际例子：<br>(MS-DOS)      (Unix)<br> :!dir           :!ls           -  用于显示当前目录的内容。<br> :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。</p>
</li>
<li><p>:w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文<br>件中。</p>
</li>
<li><p>v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件<br>FILENAME 中。</p>
</li>
<li><p>:r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置<br>后面。</p>
</li>
<li><p>:r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</p>
</li>
</ol>
<h2 id="第六讲小结"><a href="#第六讲小结" class="headerlink" title="第六讲小结"></a><strong>第六讲小结</strong></h2><hr>
<ol>
<li><p>输入小写的 o 可以在光标下方打开新的一行并进入插入模式。<br>输入大写的 O 可以在光标上方打开新的一行。</p>
</li>
<li><p>输入小写的 a 可以在光标所在位置之后插入文本。<br>输入大写的 A 可以在光标所在行的行末之后插入文本。</p>
</li>
<li><p>e 命令可以使光标移动到单词末尾。</p>
</li>
<li><p>操作符 y 复制文本，p 粘贴先前复制的文本。</p>
</li>
<li><p>输入大写的 R 将进入替换模式，直至按 <code>&lt;ESC&gt;</code> 键回到正常模式。</p>
</li>
<li><p>输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：<br> ‘ic’ ‘ignorecase’    查找时忽略字母大小写<br>‘is’ ‘incsearch’    查找短语时显示部分匹配<br>‘hls’ ‘hlsearch’    高亮显示所有的匹配短语<br>选项名可以用完整版本，也可以用缩略版本。</p>
</li>
<li><p>在选项前加上 no 可以关闭选项：  :set noic</p>
</li>
</ol>
<h2 id="第七讲小结"><a href="#第七讲小结" class="headerlink" title="第七讲小结"></a><strong>第七讲小结</strong></h2><hr>
<ol>
<li><p>输入 :help 或者按 <F1> 键或 <Help> 键可以打开帮助窗口。</p>
</li>
<li><p>输入 :help cmd 可以找到关于 cmd 命令的帮助。</p>
</li>
<li><p>输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。</p>
</li>
<li><p>输入 :q 以关闭帮助窗口</p>
</li>
<li><p>您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。</p>
</li>
<li><p>当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。<br>按 <TAB> 可以使用一个补全。</p>
</li>
</ol>
<p>详情可以参考<a href="https://yianwillis.github.io/vimcdoc/doc/usr_toc.html">vim中文手册</a></p>
<mark class="label ">小彩蛋</mark>
<p>通过<code>man vimtutor</code> 可以查阅系统存放教程的具体位置</p>
<pre><code>FILES
       &#x2F;usr&#x2F;share&#x2F;vim&#x2F;vim81&#x2F;tutor&#x2F;tutor[.language]
                      The Vimtutor text file(s).

       &#x2F;usr&#x2F;share&#x2F;vim&#x2F;vim81&#x2F;tutor&#x2F;tutor.vim
                      The Vim script used to copy the Vimtutor text file.</code></pre>

]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>多终端同步博客</title>
    <url>/posts/a7e41fa1/</url>
    <content><![CDATA[<p>参考资料：<br><a href="https://segmentfault.com/a/1190000019459014">Hexo博客多端同步问题</a></p>
]]></content>
      <tags>
        <tag>hexo tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>会议纪要</title>
    <url>/posts/2c109fcd/</url>
    <content><![CDATA[<p>工作中难免会需要书写会议纪要等内容，一个好的格式能够体现作为一个职业人的专业素养，下面笔者便摘记工作中使用过的模板。</p>
<span id="more"></span>
<p><strong>会议纪要大纲：</strong></p>
<ul>
<li>会议主题</li>
<li>会议时间</li>
<li>参会部门</li>
<li>参会人员</li>
<li>记录人员</li>
<li>会议内容</li>
<li>结论</li>
<li>附件<code>[可选]</code></li>
</ul>
]]></content>
      <categories>
        <category>working</category>
      </categories>
      <tags>
        <tag>meeting</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统笔记</title>
    <url>/posts/8ce3e425/</url>
    <content><![CDATA[<mark class="label primary">声明：</mark>
<p>以下笔记内容摘自现代操作系统原理与实现.陈海波、夏虞斌 等著</p>
<span id="more"></span>

<h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a><strong>操作系统概述</strong></h2><hr>
<p>操作系统有两个职责：对<strong>硬件</strong>进行管理和抽象，为<strong>应用</strong>提供服务并进行管理</p>
<p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%AE%80%E8%A6%81%E7%BB%93%E6%9E%84.svg" alt="操作系统简要结构"></p>
<p>操作系统简史</p>
<ul>
<li>GM-NAA I&#x2F;O: 第一个(批处理)操作系统</li>
<li>OS&#x2F;360: 从专用走向通用</li>
<li>Multics&#x2F;UNIX&#x2F;Linux: 分时与多任务</li>
<li>macOS&#x2F;Windows: 以人为本的人机交互</li>
</ul>
<p>操作系统接口<br>从应用角度，操作系统提供了不同层次的接口，主要包括：</p>
<ul>
<li>系统调用接口</li>
<li>POSIX接口</li>
<li>领域应用接口</li>
</ul>
<p><img src="/images/%E4%B8%8D%E5%90%8C%E5%B1%82%E6%AC%A1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3.svg" alt="不同层次的操作系统接口"></p>
<p>ChCore用于本书教学而开发的实验操作系统，基本结构如下所示：</p>
<p><img src="/images/ChCore%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="ChCore系统架构示意图"></p>
<h2 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a><strong>硬件结构</strong></h2><hr>
<p>冯·诺伊曼结构包括三个主要部分：</p>
<ul>
<li>中央处理单元</li>
<li>存储器</li>
<li>输入输出</li>
</ul>
<p><img src="/images/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="冯诺依曼结构示意图"></p>
<p>ISA- Instruction Set Architecture - 指令集架构</p>
<ul>
<li>RISC(Reduced Instruction Set Computer)- 精简指令集计算机</li>
<li>CISC(Complex Instruction Set Computer)- 复杂指令集计算机</li>
</ul>
<p>RISC - AArch64<br>每条指令的长度固定4字节，指令类型包括：</p>
<ul>
<li>数据搬移指令(mov)</li>
<li>寄存器计算指令(add&#x2F;sub)</li>
<li>内存读写指令(ldr&#x2F;str)</li>
<li>跳转指令(b)</li>
<li>过程调用指令(bl&#x2F;ret)</li>
<li>特权指令(mrs&#x2F;msr)</li>
</ul>
<h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a><strong>操作系统结构</strong></h2><hr>
<p>在构建复杂系统时，必须合理考虑其内部结构，在不同的需求之间进行<strong>权衡</strong>。</p>
<p>操作系统乃至计算机系统中控制复杂度的一个重要设计原则是：将<strong>策略</strong>与<strong>机制</strong>相分离。<br>策略表示“做什么”，机制表示“如何做”</p>
<center><font color=#F78A52>典型的操作系统机制与策略</font></center>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">策略</th>
<th align="center">机制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">登录</td>
<td align="center">什么用户、以什么权限登录等</td>
<td align="center">输入处理、策略文件管理、桌面启动加载等</td>
</tr>
<tr>
<td align="center">调度</td>
<td align="center">先到先得、时间片轮转等</td>
<td align="center">调度队列的设计、调度实体的表示、调度的中断处理等</td>
</tr>
</tbody></table>
<p>管理复杂系统的重要方法是M.A.L.H方法，即</p>
<ul>
<li>模块化(modularity)</li>
<li>抽象(abstraction)</li>
<li>分层(layering)<ul>
<li>不同类模块之间的层级</li>
</ul>
</li>
<li>层级(hierarchy)<ul>
<li>同类模块之间的分层</li>
</ul>
</li>
</ul>
<p>操作系统内核架构：</p>
<ul>
<li>简要结构</li>
<li>宏内核</li>
<li>微内核</li>
<li>外核</li>
<li>多核 &amp; 混合内核</li>
</ul>
<p><strong>简要结构</strong><br>一些功能较为简单的操作系统，会选择将应用程序与操作系统放置在同一个地址空间中，无需底层硬件提供复杂的内存管理、特权级隔离等功能。</p>
<p>典型示例：MS-DOS(MicrSoft Disk Operating System)<br>优点：应用程序对操作系统服务的调用无需切换地址空间和权限层级，因此更加高效。<br>缺点：任何一个应用或操作系统模块出现了问题，均有可能使整个系统崩溃。</p>
<p><img src="/images/MS-DOS%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.svg" alt="MS-DOS的系统结构"></p>
<p><strong>宏内核架构</strong><br>又称<strong>单内核</strong>，其特征是操作系统内核的所有模块(包括进程调度、内存管理、文件系统、设备驱动等)均运行在内核态，具备直接操作硬件的能力，这类操作系统包裹UNIX&#x2F;Linux、FreeBSD等。</p>
<p><img src="/images/%E5%AE%8F%E5%86%85%E6%A0%B8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.svg" alt="宏内核的基本结构"></p>
<p><strong>微内核</strong><br>将单个功能或模块(如文件系统、设备驱动等)从内核中拆分出来，作为一个独立的服务部署到独立的运行环境中；内核仅保留极少的功能，为这些服务提供通信等基础能力，使其能够互相协作以完成操作系统所必需的功能。</p>
<p><strong>外核架构</strong><br>外核架构可以为不同应用提供定制化的高效资源管理：按照不同应用领域的要求，将对硬件资源的抽象模块化为一系列的库(即<strong>LibOS</strong>).</p>
<p>操作系统框架结构：</p>
<ul>
<li>Android 系统框架</li>
<li>ROS 系统框架</li>
</ul>
<p><strong>Android 系统框架</strong><br>在Linux内核之上运行的Android系统框架包括如下几个主要组件：</p>
<ol>
<li>硬件抽象层</li>
<li>Android库</li>
<li>Android运行环境</li>
<li>Android应用框架</li>
<li>服务化架构与BinderIPC</li>
</ol>
<p><img src="/images/Android%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.svg" alt="Android操作系统架构"></p>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h2><hr>
<p>Q:操作系统如何让不同的应用程序能够即<em><strong>高效</strong></em> 又 <em><strong>安全</strong></em>地共同使用物理内存资源呢？<br>A:在应用程序与物理内存之间加入一个新的抽象：<font color=#F78A52>虚拟内存</font></p>
<p>虚拟内存的设计三目标：</p>
<ul>
<li>高效性<ul>
<li>不能在应用程运行的过程中造成明显的性能开销</li>
<li>不应该占用过多的物理内存资源，明显降低物理内存的有效利用率</li>
</ul>
</li>
<li>安全性<ul>
<li>虚拟内存抽象需要使不同应用程序的内存互相隔离</li>
</ul>
</li>
<li>透明性<ul>
<li>应用开发者在编程时无须考虑虚拟内存抽象</li>
</ul>
</li>
</ul>
<p><strong>虚拟地址 &amp; 物理地址</strong></p>
<p><img src="/images/CPU%E5%9C%B0%E5%9D%80%E7%BF%BB%E8%AF%91%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="CPU地址翻译示意图"></p>
<p>MMU - Memory Management Unit – 内存管理单元，负责虚拟地址到物理地址的转换</p>
<p>TLB - Translation Lookaside Buffer – 转址旁路缓存，加速地址翻译的过程</p>
<p>MMU将虚拟地址翻译为物理地址的主要机制有两种：</p>
<ul>
<li>分段机制<ul>
<li>操作系统能够实现物理内存资源的离散分配，易造成外部碎片</li>
</ul>
</li>
<li>分页机制<ul>
<li>被现代操作系统广泛采用</li>
</ul>
</li>
</ul>
<p><img src="/images/%E5%88%86%E6%AE%B5%E6%9C%BA%E5%88%B6%E4%B8%8B%E5%9C%B0%E5%9D%80%E7%BF%BB%E8%AF%91%E8%A7%84%E5%88%99%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="分段机制下地址翻译规则示意图"></p>
<p><strong>基于分页的虚拟内存</strong><br>AArch64架构下的4级页表</p>
<p><img src="/images/AArch64%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8B%E5%9F%BA%E4%BA%8E4%E7%BA%A7%E9%A1%B5%E8%A1%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E7%BF%BB%E8%AF%91.svg" alt="AArch64体系结构下基于4级页表的地址翻译"></p>
<p>一个64位的虚拟地址在逻辑上被划分成如下几个部分：</p>
<ul>
<li>第63位至48位：全为0或者全为1（硬件要求）</li>
<li>第47位至39位：这9位作为该虚拟地址在第0级页表中的索引值，对应图中的虚拟页号0</li>
<li>第38位至30位：这9位作为该虚拟地址在第1级页表中的索引值，对应图中的虚拟页号1</li>
<li>第29位至21位：这9位作为该虚拟地址在第2级页表中的索引值，对应图中的虚拟页号2</li>
<li>第20位至12位：这9位作为该虚拟地址在第3级页表中的索引值，对应图中的虚拟页号3</li>
<li>第11位至0位：由于页的大小是4KB，所以低12位代表页内偏移量</li>
</ul>
<p>TLB：加速地址翻译</p>
<p><img src="/images/TLB%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="TLB的结构示意图"></p>
<p>TLB刷新? 切换应用主动刷新TLB<br>避免刷新带来的开销：</p>
<ul>
<li>AArch64体系，采用ASID(Address Space IDentifier)</li>
<li>x86-64, 采用PCID(Process Context IDentifier)</li>
</ul>
<p>缺页 &amp; 换页异常</p>
<p>页替换策略</p>
<ul>
<li>MIN策略&#x2F;OPT策略</li>
<li>FIFO策略</li>
<li>Second Chance策略</li>
<li>LRU策略</li>
<li>MRU策略</li>
<li>时钟算法策略</li>
</ul>
<p>工作集模型：能够有效地避免颠簸现象的发生</p>
<p><strong>虚拟内存功能</strong></p>
<ul>
<li>共享内存<ul>
<li>让不同应用程序之间互相通信&#x2F;传递数据</li>
</ul>
</li>
<li>写时拷贝<ul>
<li>能够节约物理内存资源，比如不同的应用程序以写时拷贝的方式映射相同的动态链接库</li>
<li>让父子程序以只读方式共享全部内存数据，避免内存拷贝操作带来的时间和空间开销</li>
</ul>
</li>
<li>内存去重</li>
<li>内存压缩</li>
<li>大页<ul>
<li>减少TLB缓存项的消耗，从而有机会提高TLB命中率</li>
<li>减少页表级数，从而提升查询页表的效率</li>
<li>应用程序可能未使用整个大页而造成物理内存资源浪费</li>
<li>增加操作系统管理内存的复杂度</li>
</ul>
</li>
</ul>
<p><strong>物理内存分配与管理</strong></p>
<ol>
<li>物理内存分配器设计的连个重要评价维度：<ul>
<li>内存资源利用率<ul>
<li>内存碎片 – 无法被利用的内存，其直接导致内存资源利用率的下降<ul>
<li>内部碎片</li>
<li>外部碎片</li>
</ul>
</li>
</ul>
</li>
<li>性能<ul>
<li>尽可能降低分配延迟和节约CPU资源</li>
</ul>
</li>
</ul>
</li>
<li>伙伴系统 - buddy system<ul>
<li>在现代操作系统中被广泛地用于分配连续的物理内存页</li>
<li>将物理内存划分成连续的块，以块作为基本单位进行分配<br><img src="/images/%E4%BC%99%E4%BC%B4%E5%9D%97%E7%9A%84%E5%88%86%E8%A3%82%E4%B8%8E%E5%90%88%E5%B9%B6.svg" alt="伙伴块的分裂与合并"></li>
</ul>
</li>
<li>SLAB分配器<ul>
<li>用于分配几十个或几百个字节的小内存</li>
<li>SLAB&#x2F;SLUB&#x2F;SLOB 统称 SLAB分配器</li>
</ul>
</li>
<li>常用的空闲链表<ul>
<li>隐式空闲链表</li>
<li>显示空闲链表</li>
<li>分离空闲链表</li>
</ul>
</li>
<li>物理内存与CPU缓存<ul>
<li>软件方案：染色机制</li>
<li>硬件方案：Intel CAT</li>
<li>硬件方案：ARMv8-A MPAM(Memory System Resource Partitioning and Monitoring)</li>
</ul>
</li>
</ol>
<p><strong>ChCore内存管理机制</strong><br>实验内核ChCore，内存管理部分三个重要数据结构：</p>
<ul>
<li>虚拟地址空间struct vmspace</li>
<li>虚拟地址区域struct vmregion</li>
<li>物理内存对象struct pmobject</li>
</ul>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a><strong>进程与线程</strong></h2><hr>
<p><strong>进程</strong></p>
<ul>
<li>每个进程都对应于一个运行中的程序</li>
</ul>
<p>进程的状态分为以下几种：</p>
<ul>
<li>新生状态<ul>
<li>一个进程刚被创建出来，还未完成初始化，不能被调度执行</li>
</ul>
</li>
<li>就绪状态<ul>
<li>进程可以被调度执行，但还未被调度器选择</li>
</ul>
</li>
<li>运行状态<ul>
<li>进程正在CPU上运行</li>
</ul>
</li>
<li>阻塞状态<ul>
<li>进程需要等待外部事件，暂时无法被调度</li>
</ul>
</li>
<li>终止状态<ul>
<li>进程已完成执行，且不会再被调度</li>
</ul>
</li>
</ul>
<p><img src="/images/%E8%BF%9B%E7%A8%8B%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%8A%B6%E6%80%81%E4%B9%8B%E9%97%B4%E5%88%87%E6%8D%A2.svg" alt="进程在不同状态之间切换"></p>
<p>进程的内存空间布局</p>
<ul>
<li>用户栈<ul>
<li>保存进程需要的各种临时数据，扩展方向是自顶向下</li>
</ul>
</li>
<li>代码库<ul>
<li>进程执行需要依赖的共享代码库，如libc – 只读</li>
</ul>
</li>
<li>用户堆<ul>
<li>进程动态分配的内存，扩展方向是自底向上</li>
</ul>
</li>
<li>数据与代码段<ul>
<li>保存在进程需要执行的二进制文件中，进程执行前，由操作系统载入虚拟地址空间</li>
<li>数据段保存全局变量</li>
<li>代码段保存进程执行的代码</li>
</ul>
</li>
<li>内核部分<ul>
<li>进程地址空间的最顶端</li>
<li>每个进程的虚拟地址空间里都映射了相同的内核内存</li>
</ul>
</li>
</ul>
<p><img src="/images/%E5%85%B8%E5%9E%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80.svg" alt="典型的进程内存空间布局"></p>
<p>进程控制块和上下文切换<br>PCB - Process Control Block – 进程控制块</p>
<ul>
<li>进程标识符 – PID - Process IDentifier</li>
<li>进程状态</li>
<li>虚拟内存状态</li>
<li>打开的文件</li>
<li>…</li>
</ul>
<p>上下文 - 进程运行时的寄存器状态，其能够用于保存和恢复一个进程在处理器上运行的状态</p>
<p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="进程上下文切换示意图"></p>
<p>Linux的进程操作</p>
<ol>
<li>进程的创建：fork<ul>
<li>调用一次，返回两次</li>
<li>父进程，fork返回值是子进程PID</li>
<li>子进程，fork返回值是0</li>
</ul>
</li>
<li>进程的执行：exec<ul>
<li>fork创建进程，exec执行用户指定的二进制文件</li>
</ul>
</li>
<li>进程管理<ul>
<li>进程监控 – wait</li>
<li>进程组<ul>
<li>进程集合，由一个或多个进程组成</li>
</ul>
</li>
<li>会话<ul>
<li>进程组的集合，可以由一个或多个进程组构成</li>
<li>前台进程组</li>
<li>后台进程组</li>
</ul>
</li>
</ul>
</li>
<li>讨论：fork过时了吗<ul>
<li>fork优点：<ul>
<li>fork接口设计简洁</li>
<li>fork强调进程之间的强联系</li>
</ul>
</li>
<li>fork局限性<ul>
<li>fork实现愈加复杂</li>
<li>fork性能太差</li>
<li>fork存在潜在安全漏洞</li>
</ul>
</li>
<li>Linux替代方案：<ul>
<li>合二为一：posix_spawn</li>
<li>限定场景：vfork</li>
<li>精密控制：rfork&#x2F;clone</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><strong>线程</strong><br>之所以引入线程，是因为随着计算机科学技术的发展，计算机拥有了更多的CPU核心，程序的可并行度提高，进程这一抽象开始显得过于笨重：</p>
<ul>
<li>创建进程的开销较大，需要完成创建独立的地址空间&#x2F;载入数据和代码段&#x2F;初始化堆等步骤</li>
<li>进程拥有独立的虚拟地址空间，在进程间共享数据和同步比较麻烦<ul>
<li>共享内存页（粒度较粗）</li>
<li>进程间通信（开销较高）</li>
</ul>
</li>
</ul>
<p>线程 – 拥有独立的可执行单元，共享进程的地址空间，但又各自保存运行时所需的状态（状态）</p>
<p>多线程的地址空间布局：</p>
<ul>
<li>分离的内核栈与用户栈</li>
<li>共享的其他区域</li>
</ul>
<p><img src="/images/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80.svg" alt="多线程进程的地址空间布局"></p>
<p>用户态线程与内核态线程 – 多线程模型：<br>a) 多对一模型<br>b) 一对一模型<br>c) 多对多模型</p>
<p>TCB - Thread Control Block – 线程控制块<br>TLS - Thread Local Storage – 线程本地存储</p>
<p>线程的基本接口：以POSIX线程库为例</p>
<ol>
<li>线程创建<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span><br><span class="line"><span class="params">                    <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compile and link with -pthread.</span></span><br></pre></td></tr></table></figure></li>
<li>线程退出<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span>;</span><br></pre></td></tr></table></figure></li>
<li>出让资源<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_yield</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></li>
<li>合并操作<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br></pre></td></tr></table></figure></li>
<li>挂起与唤醒<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂起方式1：等待固定时间</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sleep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂起方式2：等待具体事件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="keyword">struct</span> timespec *abstime)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 唤醒</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>ChCore的线程上下文<br>线程上下主要是指处理器中大部分寄存器的值（AArch64架构）</p>
<ul>
<li>程序计数器PC – ELR_EL1</li>
<li>通用寄存器 – X0 ~ X30</li>
<li>特殊寄存器<ul>
<li>SP_EL0 - 线程运行时的栈指针</li>
<li>SPSR_EL1 - 线程执行的CPU状态</li>
<li>TTBR0_EL1 - 线程对应的进程页表</li>
</ul>
</li>
</ul>
<p>ChCore中上下文切换实现</p>
<ul>
<li>进入内核态与上下文保存</li>
<li>页表与内核栈的切换</li>
<li>上下文恢复与返回用户态</li>
</ul>
<p><img src="/images/ChCore%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%A0%88%E5%8F%98%E5%8C%96.svg" alt="ChCore上下文切换过程中的栈变化"></p>
<p><strong>纤程</strong><br>用户态线程 – 纤程</p>
<ul>
<li>更轻量，开销更小，提高可扩展性</li>
</ul>
<p>POSIX的纤程支持：ucontext</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getcontext</span><span class="params">(<span class="type">ucontext_t</span> *ucp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setcontext</span><span class="params">(<span class="type">const</span> <span class="type">ucontext_t</span> *ucp)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">makecontext</span><span class="params">(<span class="type">ucontext_t</span> *ucp, <span class="type">void</span> (*func)(), <span class="type">int</span> argc, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">swapcontext</span><span class="params">(<span class="type">ucontext_t</span> *oucp, <span class="type">const</span> <span class="type">ucontext_t</span> *ucp)</span>;</span><br></pre></td></tr></table></figure>

<p>纤程上下文切换</p>
<ul>
<li>合作式多任务处理 – cooperative multitasking</li>
</ul>
<p>为了与操作系统提供的支持相区分，一般程序语言提供的纤程支持称为协程（Lua&#x2F;Go&#x2F;Ruby&#x2F;C++等）</p>
<h2 id="操作系统调度"><a href="#操作系统调度" class="headerlink" title="操作系统调度"></a><strong>操作系统调度</strong></h2><hr>
<p>进程是资源隔离的单位，一个进程可以有多个线程，这些线程在不同的CPU核心上并行执行，因此线程才是调度器的调度对象。<br>一般调度器会通过维护<strong>运行队列</strong>的方式来管理任务</p>
<p>调度指标：</p>
<ul>
<li>吞吐量<ul>
<li>单位时间内处理的任务数量</li>
</ul>
</li>
<li>周转时间<ul>
<li>任务从被发起直至执行结束所需的时间</li>
</ul>
</li>
<li>响应时间<ul>
<li>任务从被发起直至第一次向用户返回输出以响应用户所需时间</li>
</ul>
</li>
<li>公平性</li>
<li>资源利用率</li>
<li>实时性</li>
<li>能耗</li>
</ul>
<p>任务类型：</p>
<ul>
<li>批处理任务<ul>
<li>比如机器学习的训练&#x2F;复杂的科学计算</li>
</ul>
</li>
<li>交互式任务<ul>
<li>比如程序调试</li>
</ul>
</li>
<li>实时任务<ul>
<li>比如车载系统中的距离探测器</li>
</ul>
</li>
</ul>
<p>调度器设计的困难点：</p>
<ul>
<li>调度指标多样性</li>
<li>调度可参考的信息有限</li>
<li>任务间的复杂交互</li>
<li>许多方面存在权衡</li>
</ul>
<p>调度器中存在的权衡包括但不限于以下几点：</p>
<ul>
<li>调度开销与调度效果</li>
<li>优先级与公平性</li>
<li>性能与能耗</li>
</ul>
<p><strong>调度机制</strong><br>长期调度：触发间隔较长，它粗粒度地决定是否应该将一个新的进程纳入调度管理，负责增加系统的可被调度的进程的数量。<br>中期调度：触发相对频繁，它辅助换页机制，负责限制系统中可被调度的进程数量。<br>短期调度：触发最为频繁，它负责细粒度地调度进程的执行，做出相应的调度决策。</p>
<p><img src="/images/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="操作系统进程调度示意图"></p>
<p><strong>单核调度策略</strong><br>经典调度：</p>
<ul>
<li>先到先得 – First Come First Served - FCFS (First In First out - FIFO)<ul>
<li>特点：简单直观</li>
<li>弊端：在长短任务混合的场景下对短任务不友好</li>
<li>弊端：对I&#x2F;O密集型任务不友好</li>
</ul>
</li>
<li>最短任务优先 – Shortest Job First - SJF<ul>
<li>弊端：必须预知任务的运行时间</li>
<li>弊端：其表现严重依赖于任务到达时间点</li>
</ul>
</li>
<li>最短完成时间任务优先 – Shortest Time-to-Completion First - STCF<ul>
<li>弊端：必须预知任务的运行时间</li>
<li>弊端：长任务饥饿</li>
</ul>
</li>
<li>时间片轮转 – Round Robin - RR<ul>
<li>时间片大小该如何选取？</li>
<li>弊端：在任务运行时间相似的场景下平均周转时间高</li>
</ul>
</li>
</ul>
<p>优先级调度：</p>
<ul>
<li>多级队列 – Multi-Level Queue - MLQ<ul>
<li>低优先级任务饥饿</li>
<li>优先级反转</li>
</ul>
</li>
<li>多级反馈队列 – Multi-Level Feedback Queue - MLFQ<ul>
<li>短任务拥有更高的优先级</li>
<li>低优先级的任务采用更长的时间片</li>
<li>定时地将所有任务的优先级提升至最高</li>
</ul>
</li>
</ul>
<p>公平共享调度 – fair-share scheduling ：</p>
<ul>
<li>彩票调度<ul>
<li>彩票转让</li>
<li>彩票货币</li>
<li>彩票通胀</li>
</ul>
</li>
<li>步幅调度</li>
</ul>
<p>实时调度：</p>
<ul>
<li>速率单调 – Rate-Monotonic - RM</li>
<li>最早截止时间优先 – Earliest Deadline First - EDF</li>
</ul>
<p>其他调度：</p>
<ul>
<li>借用虚拟时间 – Borrowed Virtual Time - BVT</li>
</ul>
<p><strong>多核调度策略</strong></p>
<ul>
<li>负载分担</li>
<li>协同调度<ul>
<li>群组调度</li>
</ul>
</li>
<li>两级调度<ul>
<li>全局调度器 &amp; 本地调度器</li>
</ul>
</li>
<li>负载追踪与负载均衡</li>
<li>能耗感知调度 – Energy Aware Scheduling - EAS<ul>
<li>容量</li>
<li>功率</li>
</ul>
</li>
</ul>
<p><strong>调度进阶机制</strong><br>处理器亲和性 – processor affinity</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Linux 提供的操作CPU核心的集合掩码的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE             <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CPU_ZERO</span><span class="params">(<span class="type">cpu_set_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CPU_SET</span><span class="params">(<span class="type">int</span> cpu, <span class="type">cpu_set_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CPU_CLR</span><span class="params">(<span class="type">int</span> cpu, <span class="type">cpu_set_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">CPU_ISSET</span><span class="params">(<span class="type">int</span> cpu, <span class="type">cpu_set_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">CPU_COUNT</span><span class="params">(<span class="type">cpu_set_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Linux 的任务亲和性接口</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE             <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="comment">// set and get a thread&#x27;s CPU affinity mask</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sched_setaffinity</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">size_t</span> cpusetsize,</span></span><br><span class="line"><span class="params">                      <span class="type">const</span> <span class="type">cpu_set_t</span> *mask)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sched_getaffinity</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">size_t</span> cpusetsize,</span></span><br><span class="line"><span class="params">                      <span class="type">cpu_set_t</span> *mask)</span>;</span><br></pre></td></tr></table></figure>

<p>调度策略设置<br>Linux支持多种调度策略和调度器：</p>
<ul>
<li>完全公平调度器 – Completely Fair Scheduler - CFS</li>
<li>实时调度器 – Real-Time scheduler - RT</li>
<li>截止时间调度器 – DealLine scheduler - DL</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Linux 的调度策略修改机制</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="comment">// sched_setattr, sched_getattr - set and get scheduling policy and attributes</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sched_setattr</span><span class="params">(<span class="type">pid_t</span> pid, <span class="keyword">struct</span> sched_attr *attr,</span></span><br><span class="line"><span class="params">                  <span class="type">unsigned</span> <span class="type">int</span> flags)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sched_getattr</span><span class="params">(<span class="type">pid_t</span> pid, <span class="keyword">struct</span> sched_attr *attr,</span></span><br><span class="line"><span class="params">                  <span class="type">unsigned</span> <span class="type">int</span> size, <span class="type">unsigned</span> <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_attr</span> &#123;</span></span><br><span class="line">    u32 size;              <span class="comment">/* Size of this structure */</span></span><br><span class="line">    u32 sched_policy;      <span class="comment">/* Policy (SCHED_*) */</span></span><br><span class="line">    u64 sched_flags;       <span class="comment">/* Flags */</span></span><br><span class="line">    s32 sched_nice;        <span class="comment">/* Nice value (SCHED_OTHER,</span></span><br><span class="line"><span class="comment">                              SCHED_BATCH) */</span></span><br><span class="line">    u32 sched_priority;    <span class="comment">/* Static priority (SCHED_FIFO,</span></span><br><span class="line"><span class="comment">                              SCHED_RR) */</span></span><br><span class="line">    <span class="comment">/* Remaining fields are for SCHED_DEADLINE */</span></span><br><span class="line">    u64 sched_runtime;</span><br><span class="line">    u64 sched_deadline;</span><br><span class="line">    u64 sched_period;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>案例分析：现代调度器</strong><br>Linux调度器：</p>
<ul>
<li>Linux2.4版本以前，使用 O(n) 调度器<ul>
<li>调度开销大</li>
<li>多核扩展性差</li>
</ul>
</li>
<li>Linux2.6.0版本中使用新的 O(1) 调度器<ul>
<li>交互式任务的判定算法过于复杂</li>
<li>静态时间片带来的问题</li>
</ul>
</li>
<li>Linux2.6.23开始使用完全公平调度器CFS<ul>
<li>CFS调度器的动态时间片</li>
<li>CFS调度器使用红黑树作为运行队列</li>
<li>CFS阻塞任务唤醒</li>
</ul>
</li>
</ul>
<p>macOS&#x2F;iOS调度器<br>GCD - Grand Central Dispatch</p>
<ul>
<li>采用基于优先级的实时调度策略，使用服务质量等级（Quality of Service - QoS）为任务确定优先级<ul>
<li>UserInteractive</li>
<li>UserInitiated</li>
<li>Default</li>
<li>Utility</li>
<li>Background</li>
</ul>
</li>
</ul>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a><strong>进程间通信</strong></h2><hr>
<p>Inter-Process Communication - IPC</p>
<p><img src="/images/%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E8%AE%BE%E8%AE%A1.svg" alt="简单的进程间通信设计"></p>
<p><strong>宏内核进程间通信</strong></p>
<ul>
<li>管道<ul>
<li>命名管道 &amp; 匿名管道</li>
</ul>
</li>
<li>System V 消息队列</li>
<li>System V 信号量</li>
<li>System V 共享内存</li>
<li>信号</li>
<li>套接字</li>
</ul>
<p><img src="/images/%E5%AE%8F%E5%86%85%E6%A0%B8%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E5%AF%B9%E6%AF%94.svg" alt="宏内核进程间通信机制对比"></p>
<p><strong>微内核进程间通信</strong></p>
<p>Mach:早期的微内核进程间通信设计</p>
<ul>
<li>端口设计</li>
<li>消息设计</li>
</ul>
<p>L4：围绕进程间通信优化而设计的微内核系统</p>
<ul>
<li>L4消息传递<ul>
<li>短消息</li>
<li>长消息</li>
</ul>
</li>
<li>L4控制流转移<ul>
<li>惰性调度</li>
<li>直接进程切换</li>
</ul>
</li>
<li>L4通信连接</li>
<li>L4通信控制（权限检查）<ul>
<li>氏族和酋长（已废弃）</li>
<li>Capability</li>
</ul>
</li>
</ul>
<p>LRPC - Lightweight Remote Procedure Call – 轻量级远程过程调用：迁移线程模型</p>
<ul>
<li>优化控制流切换的性能和优化数据传输的性能</li>
</ul>
<p>迁移线程的基本原则：</p>
<ul>
<li>简化控制流切换，让客户端线程执行“服务端的代码”</li>
<li>简化数据传输，共享参数栈和寄存器</li>
<li>简化接口，减少序列化等开销</li>
<li>优化并发，避免共享的全局数据结构</li>
</ul>
<p>案例分析：Android Binder<br>Binder IPC内核设计</p>
<ul>
<li>Binder 的命名服务</li>
<li>线程池模型</li>
<li>匿名共享内存 – 基于文件描述符的共享设计</li>
</ul>
<p>案例分析：ChCore进程间通信机制</p>
<ul>
<li>消息的传递和通知基于LRPC中的迁移线程技术和L4系列微内核中的直接进程切换技术</li>
<li>数据的传输基于灵活的用户态共享内存</li>
</ul>
<h2 id="同步原语"><a href="#同步原语" class="headerlink" title="同步原语"></a><strong>同步原语</strong></h2><hr>
<p><strong>互斥锁</strong><br>竞争冒险 – race hazard：程序的正确性依赖于特定执行顺序的情况<br>互斥访问 – mutual exclusion：任意时刻只允许至多一个线程访问的方式<br>临界区 – critical section：保证互斥访问共享资源的代码区域<br>临界区问题：通过设计协议来保证互斥访问临界区的问题</p>
<p>保证程序正确的算法需满足以下三个条件：</p>
<ul>
<li>互斥访问</li>
<li>有限等待</li>
<li>空闲让进</li>
</ul>
<p>解决临界区问题的算法：</p>
<ul>
<li>硬件实现：关闭中断<ul>
<li>多核环境，关闭中断方法不适用</li>
</ul>
</li>
<li>软件实现：皮特森算法<ul>
<li>只能应对两个线程的情况</li>
</ul>
</li>
<li>软硬件协同：使用原子操作实现互斥锁<ul>
<li>原子操作 – atomic operation<ul>
<li>比较与置换 – Compare-And-Swap - CAS</li>
<li>拿取并累加 – Fetch-And-Add - FAA</li>
</ul>
</li>
<li>互斥锁抽象 - 互斥锁<ul>
<li>自旋锁 – spin lock</li>
<li>排号自旋锁 – ticket lock</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>条件变量</strong><br>在生产者与消费者模型中，当剩余空位为0时，生产者会陷入循环等待，也称循环忙等，从而浪费CPU资源，增加系统能耗，人们希望使用一种挂起&#x2F;唤醒机制来解决这个问题，即条件变量。</p>
<p>cond_wait</p>
<ul>
<li>挂起当前线程</li>
<li>调用cond_wait前需要获取搭配的互斥锁</li>
<li>cond_wait在挂起当前线程的同时，互斥锁会被原子地释放</li>
<li>cond_wait返回之前会重新获取互斥锁</li>
</ul>
<p>cond_signal</p>
<ul>
<li>唤醒等待在该条件变量上的线程</li>
</ul>
<p><strong>信号量</strong></p>
<p><strong>读写锁</strong></p>
<ul>
<li>读共享数据的线程相互之间不会干扰</li>
<li>写共享数据的线程与读共享数据的线程不能同时执行</li>
</ul>
<p>读写锁的实现：</p>
<ul>
<li>偏向读者的读写锁<ul>
<li>提高读者之间的并行度</li>
<li>可能面临很高的写延迟</li>
</ul>
</li>
<li>偏向写者的读写锁<ul>
<li>降低读者之间的并行度</li>
<li>写者可以在读者离开临界区立刻进入临界区</li>
</ul>
</li>
</ul>
<p><strong>RCU</strong><br>RCU – Read-Copy Update</p>
<ul>
<li>订阅&#x2F;发布机制</li>
<li>宽期限</li>
</ul>
<p><strong>管程</strong></p>
<ul>
<li>共享的数据</li>
<li>操作共享数据的函数</li>
</ul>
<p>管程是一种高层级的抽象，其利用其他同步原语实现了一套干净的接口。</p>
<p><strong>同步带来的问题</strong></p>
<ol>
<li>死锁</li>
<li>活锁</li>
</ol>
<p>死锁产生的原因：</p>
<ul>
<li>互斥访问</li>
<li>持有并等待</li>
<li>资源非抢占</li>
<li>循环等待</li>
</ul>
<p>死锁检测与恢复</p>
<ul>
<li>检测是否有循环等待，并打破循环等待</li>
</ul>
<p>死锁预防</p>
<ul>
<li>避免互斥访问</li>
<li>不允许持有并等待</li>
<li>允许资源被抢占</li>
<li>避免循环等待</li>
</ul>
<p>死锁避免</p>
<ul>
<li>银行家算法<ul>
<li>检查是否处于安全状态</li>
</ul>
</li>
</ul>
<p>优先级反转</p>
<ul>
<li>由于同步导致线程执行顺序违反预设优先级的问题</li>
</ul>
<p>处理办法：</p>
<ul>
<li>不可抢占临界区协议 – Non-preemptive Critical section Protocol - NCP</li>
<li>优先级继承协议 – Priority Inheritance Protocol - PIP</li>
<li>优先级置顶协议 – Priority Ceiling Protocol - PCP<ul>
<li>即时优先级置顶协议 – Immediate Priority Ceiling Protocol - IPCP</li>
<li>原生优先级置顶协议 – Origin Priority Ceiling Protocol - OPCP</li>
</ul>
</li>
</ul>
<p><strong>案例分析：Linux中的futex</strong></p>
<ul>
<li>futex机制实现的互斥锁能在竞争程度较低时，直接使用原子操作完成枷锁。</li>
<li>在竞争程度较高时，应用程序能够通过系统调用挂起并等待被后续锁持有者唤醒。</li>
</ul>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a><strong>文件系统</strong></h2><hr>
<p>文件 – 有名字的字符序列<br>文件元数据<br>文件系统 – 实现文件接口并负责管理文件数据和元数据的系统</p>
<p>虚拟文件系统 – Virtual File System - VFS</p>
<ul>
<li>页缓存</li>
<li>inode缓存</li>
<li>目录项缓存</li>
</ul>
<p><strong>基于inode的文件系统</strong><br>inode与文件</p>
<p><img src="/images/%E5%B8%B8%E8%A7%84%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95.svg" alt="常规文件数据索引"></p>
<center><font color='orange'>POSIX中定义的部分文件元数据</font></center>

<table>
<thead>
<tr>
<th>文件元数据</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>mode</td>
<td>文件模式，其中包括文件类型和文件权限</td>
</tr>
<tr>
<td>nlink</td>
<td>指向此文件的链接个数</td>
</tr>
<tr>
<td>uid</td>
<td>文件所属用户的ID</td>
</tr>
<tr>
<td>gid</td>
<td>文件所属用户组ID</td>
</tr>
<tr>
<td>size</td>
<td>文件的大小</td>
</tr>
<tr>
<td>atime</td>
<td>文件数据最近访问时间</td>
</tr>
<tr>
<td>ctime</td>
<td>文件元数据最近修改时间</td>
</tr>
<tr>
<td>mtime</td>
<td>文件数据最近修改时间</td>
</tr>
</tbody></table>
<center><font color='orange'>Linux中支持的文件类型</font></center>

<table>
<thead>
<tr>
<th>文件类型</th>
<th>文件用途</th>
</tr>
</thead>
<tbody><tr>
<td>常规文件</td>
<td>保存数据</td>
</tr>
<tr>
<td>目录文件</td>
<td>表示和组织一组文件</td>
</tr>
<tr>
<td>符号链接文件</td>
<td>保存符号链接（指向目标文件的路径）</td>
</tr>
<tr>
<td>FIFO文件</td>
<td>以队列形式传递数据，比FIFO文件更加灵活</td>
</tr>
<tr>
<td>套接字文件</td>
<td>用于传递数据，比FIFO文件更加灵活</td>
</tr>
<tr>
<td>字符设备文件</td>
<td>表示和访问字符设备</td>
</tr>
<tr>
<td>块设备文件</td>
<td>表示和访问块设备</td>
</tr>
</tbody></table>
<p>文件名与目录</p>
<p><img src="/images/%E7%9B%AE%E5%BD%95%E9%A1%B9.svg" alt="目录项"></p>
<p>硬链接与符号链接</p>
<p>存储布局</p>
<ul>
<li>超级块<ul>
<li>魔法数字</li>
</ul>
</li>
<li>块分配信息</li>
<li>inode分配信息</li>
<li>inode表</li>
<li>文件数据块</li>
</ul>
<p><img src="/images/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%98%E5%82%A8%E5%B8%83%E5%B1%80.svg" alt="文件系统的存储布局"></p>
<p><strong>虚拟文件系统</strong></p>
<ul>
<li>VFS中的超级块</li>
<li>VFS中的inode</li>
<li>VFS中的文件数据管理</li>
<li>VFS中的目录项</li>
</ul>
<p>伪文件系统</p>
<ul>
<li>Linu实现了一些不用于保存文件数据的文件系统</li>
</ul>
<center><font color='orange'>Linux中的一些伪文件系统</font></center>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">常用挂载点</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">procfs</td>
<td align="center">&#x2F;proc</td>
<td align="center">查看和操作进程相关的信息和配置</td>
</tr>
<tr>
<td align="center">sysfs</td>
<td align="center">&#x2F;sys</td>
<td align="center">查看和操作与进程无关的系统配置</td>
</tr>
<tr>
<td align="center">debugfs</td>
<td align="center"></td>
<td align="center">用于内核状态的调试</td>
</tr>
<tr>
<td align="center">cgroupfs</td>
<td align="center"></td>
<td align="center">用于管理系统中的cgroup</td>
</tr>
<tr>
<td align="center">configfs</td>
<td align="center">&#x2F;sys&#x2F;kernel&#x2F;config</td>
<td align="center">创建&#x2F;管理和删除内核对象</td>
</tr>
<tr>
<td align="center">hugetlbfs</td>
<td align="center"></td>
<td align="center">查看和管理系统中的大页信息</td>
</tr>
</tbody></table>
<p><strong>其他文件系统</strong></p>
<ul>
<li>FAT文件系统<ul>
<li>文件分配表 – File Allocation Table - FAT</li>
</ul>
</li>
<li>NTFS - New Technology File System</li>
<li>FUSE与用户态文件系统</li>
</ul>
<h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a><strong>设备管理</strong></h2><hr>
<p>总线：</p>
<ul>
<li>AMBA总线</li>
<li>PCI总线</li>
</ul>
<p>可编程I&#x2F;O：</p>
<ul>
<li>控制寄存器</li>
<li>状态寄存器</li>
<li>输入&#x2F;输出寄存器</li>
</ul>
<p>高效数据传输：DMA - Direct Memory Access – 直接内存访问</p>
<p>设备地址翻译：IOMMU - Input-Output Memory Management Unit – 输入输出内存管理单元</p>
<p>设备识别：</p>
<ul>
<li>设备树</li>
<li>ACPI - Advanced Configuration and Power Interface – 高级配置与电源接口</li>
</ul>
<p>中断控制器：</p>
<ul>
<li>ICOLL - Interrupt Collector</li>
<li>GIC - Generic Interrupt Controller – 通用中断控制器</li>
</ul>
<p>中断类型：</p>
<ul>
<li>软件生成中断</li>
<li>私有设备中断</li>
<li>共享设备中断</li>
</ul>
<p>中断优先级 - 中断号</p>
<p>中断状态：</p>
<ul>
<li>Inactive</li>
<li>Pending</li>
<li>Active</li>
<li>Active &amp; Pending</li>
</ul>
<p>中断处理：</p>
<ul>
<li>上半部<ul>
<li>硬中断</li>
</ul>
</li>
<li>下半部<ul>
<li>软中断</li>
<li>tasklet</li>
<li>工作队列</li>
</ul>
</li>
</ul>
<p>设备驱动 - 操作系统中负责控制设备的定制化程序</p>
<p>Linux设别驱动模型</p>
<p>Linux系统三种基本设备抽象：</p>
<ul>
<li>字符设备</li>
<li>块设备</li>
<li>网络设备</li>
</ul>
<h2 id="系统虚拟化"><a href="#系统虚拟化" class="headerlink" title="系统虚拟化"></a><strong>系统虚拟化</strong></h2><hr>
<p>系统虚拟化技术：</p>
<ul>
<li>CPU虚拟化</li>
<li>内存虚拟化</li>
<li>I&#x2F;O虚拟化</li>
</ul>
<p><strong>CPU虚拟化：</strong></p>
<table>
    <tr>
        <th>软件技术</th>
        <th>硬件虚拟化技术</th>
    </tr >
  <tr >
      <td>解释执行</td>
        <td rowspan="4">新的硬件特权级所有敏感指令可下陷 </td>
    </tr>
  <tr>
        <td>动态二进制翻译</td>
    </tr>
    <tr>
        <td>扫描和翻译</td>
    </tr>
    <tr>
        <td>半虚拟化技术</td>
    </tr>
</table>


<p><strong>内存虚拟化：</strong></p>
<table>
  <caption style="color:orange">内存虚拟化技术总结</caption>
    <tr>
        <th>软件技术</th>
        <th>硬件虚拟化技术</th>
    </tr >
  <tr >
      <td>解释执行</td>
        <td rowspan="2">第二阶段地址翻译</td>
    </tr>
  <tr>
        <td>直接页表映射</td>
    </tr>
</table>


<p><strong>I&#x2F;O虚拟化：</strong></p>
<table>
  <caption style="color:orange">I/O虚拟化技术总结</caption>
    <tr>
        <th>软件技术</th>
        <th>硬件虚拟化技术</th>
    </tr >
  <tr >
      <td>软件模拟方法</td>
        <td rowspan="2">设备直通（IOMMU 和 SR-IOV）</td>
    </tr>
  <tr>
        <td>半虚拟化方法</td>
    </tr>
</table>

<p>中断虚拟化</p>
]]></content>
      <categories>
        <category>four fundamental computer technology</category>
      </categories>
      <tags>
        <tag>operator system</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络笔记</title>
    <url>/posts/db0b4310/</url>
    <content><![CDATA[<mark class="label primary">声明：</mark>
<p>以下笔记内容摘自计算机网络第八版 谢希仁 编著</p>
<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><hr>
<p>网络类型：<br>电信网络&#x2F;有线电视网络&#x2F;计算机网络</p>
<p>网络 – 计算机网络简称</p>
<ul>
<li>由若干节点（计算机&#x2F;集线器&#x2F;交换机&#x2F;路由器等）和连接这些节点的链路组成。</li>
</ul>
<p>互连网</p>
<ul>
<li>是一个通用名词，它泛指由多个计算机网络互连而成的计算机网络。</li>
</ul>
<p>互联网</p>
<ul>
<li>是一个专有名词，它指当前全球最大的&#x2F;开放的&#x2F;由众多网络相互连接而成的特定互连网，它采用TCP&#x2F;IP协议族作为通信的规则，且其前身是美国的ARPANET。</li>
</ul>
<p>ISP - Internet Service Provider – 互联网服务提供者</p>
<p>互联网组成：</p>
<ul>
<li>边缘部分 - 用户直接使用</li>
<li>核心部分 - 为边缘部分提供服务的（提供连通性和交换）</li>
</ul>
<p>1.边缘部分：<br>端系统之间的通信方式：</p>
<ul>
<li>客户-服务器方式</li>
<li>对等连接方式P2P</li>
</ul>
<p>2.核心部分：</p>
<ul>
<li>电路交换<ul>
<li>整个报文的比特流连续地从源点直达终点，好像在一个管道中传送</li>
</ul>
</li>
<li>分组交换<ul>
<li>整个报文先传送到相邻节点，全部存储下来后查找转发表，转发到下一个节点</li>
</ul>
</li>
<li>报文交换<ul>
<li>单个分组（整个报文的一部分）传送到相邻节点，存储下来后查找转发表，转发到下一个节点</li>
</ul>
</li>
</ul>
<p>计算机网络分类：<br>1.按照网络的作用范围进行分类：</p>
<ul>
<li>广域网WAN - Wide Area Network</li>
<li>城域网MAN - Metropolitan Area Network</li>
<li>局域网LAN - Local Area Network</li>
<li>个人区域网PAN - Personal Area Network</li>
</ul>
<p>2.按照网络的使用者进行分类</p>
<ul>
<li>公用网 - public network</li>
<li>专用网 - private network</li>
</ul>
<p>3.用来把用户接入到互联网的网络</p>
<ul>
<li>接入网AN - Access Network – 本地接入网或居民接入网</li>
</ul>
<p>计算机网络的性能</p>
<p>性能指标：</p>
<ul>
<li>速率</li>
<li>带宽</li>
<li>吞吐量</li>
<li>时延<ul>
<li>发送时延</li>
<li>传播时延</li>
<li>处理时延</li>
<li>排队时延</li>
</ul>
</li>
<li>时延带宽积</li>
<li>往返时间RTT</li>
<li>利用率</li>
</ul>
<p>非性能指标：</p>
<ul>
<li>费用</li>
<li>质量</li>
<li>标准化</li>
<li>可靠性</li>
<li>可扩展性和可升级性</li>
<li>易于管理和维护</li>
</ul>
<p>网络协议简称协议，主要由以下三个要素组成：</p>
<ul>
<li>语法<ul>
<li>数据与控制信息的结构或格式</li>
</ul>
</li>
<li>语义<ul>
<li>需要发出何种控制信息，完成何种动作以及做出何种响应</li>
</ul>
</li>
<li>同步<ul>
<li>事件实现顺序的详细说明</li>
</ul>
</li>
</ul>
<p>五层协议体系结构：</p>
<ul>
<li>应用层</li>
<li>运输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p>实体 - 任何可以发送或接收信息的硬件或软件进程<br>协议 - 控制两个对等实体或多个实体进行通信的规则的集合<br>服务访问点 - 在同一系统中相邻两层的实体进行交互（即交换信息）的地方</p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a><strong>物理层</strong></h2><hr>
<p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</p>
<h3 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h3><p>物理层与传输媒体接口相关的四特性：</p>
<ul>
<li>机械特性<ul>
<li>接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等</li>
</ul>
</li>
<li>电气特性<ul>
<li>指明在接口电缆的各条线上出现的电压的范围</li>
</ul>
</li>
<li>功能特性<ul>
<li>指明某条线上出现的某一电平的电压的意义</li>
</ul>
</li>
<li>过程特性<ul>
<li>指明对于不同功能的各种可能事件的出现顺序</li>
</ul>
</li>
</ul>
<h3 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h3><p>数据通信系统可划分为三个部分：即源系统、传输系统、目的系统</p>
<p>源系统：</p>
<ul>
<li>源点<ul>
<li>源点设备产生要传输的数据</li>
</ul>
</li>
<li>发送器<ul>
<li>数字比特流通过发送器编码后才能在传输系统中进行传输</li>
<li>典型的发送器就是调制器</li>
</ul>
</li>
</ul>
<p>目的系统：</p>
<ul>
<li>接收器<ul>
<li>将传输过来的信号转换为目的设备能处理的信息</li>
<li>典型的接收器就是解调器</li>
</ul>
</li>
<li>终点<ul>
<li>终点设备从接收器获取传送过来的数字比特流，然后把信息输出。</li>
</ul>
</li>
</ul>
<p>消息：话音、文字、图像、视频等<br>数据：运送消息的实体<br>信道：一般表示向某一方向传送信息的媒体</p>
<p>通信双方交互方式分为三种：</p>
<ul>
<li>单向通信或称单工通信</li>
<li>双向交替通信或称半双工通信</li>
<li>双向同时通信或称全双工通信</li>
</ul>
<p>常用编码方式：</p>
<ul>
<li>不归零制：正电平代表1，负电平代表0</li>
<li>归零制：正脉冲代表1，负脉冲代表0</li>
<li>曼彻斯特编码：位周期中心向上跳变代表0，位周期中心向下跳变代表1.但也可反过来定义。</li>
<li>差分曼彻斯特编码：每一位的中心处始终都有跳变。位开始边界有跳变代表0，位开始边界没有跳变代表1.</li>
</ul>
<p>基本的带通调制方法：</p>
<ul>
<li>调幅AM</li>
<li>调频FM</li>
<li>调相PM</li>
</ul>
<p>奈氏准则：</p>
<ul>
<li>在带宽为<em>W</em>(Hz)的低通信道中，若不考虑噪声影响，则码元传输的最高速率是2<em>W</em>(码元&#x2F;秒)<br>香农公式：</li>
<li>信道的带宽或者信道中的信噪比越大，信道的极限传输速率就越高</li>
</ul>
<h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><p>传输媒体：</p>
<ul>
<li>引导型传输媒体</li>
<li>非引导型传输媒体</li>
</ul>
<p>引导型传输媒体：</p>
<ul>
<li>双绞线<ul>
<li>无屏蔽双绞线UTP(Unshielded Twisted Pair)</li>
<li>屏蔽双绞线STP(Shielded Twisted Pair)</li>
</ul>
</li>
<li>同轴电缆<ul>
<li>铜质芯线、绝缘层、网状编织外导体屏蔽层、绝缘保护套层组成</li>
</ul>
</li>
<li>光缆</li>
</ul>
<p>非导引型传输媒体：</p>
<ul>
<li>微波接力通信</li>
<li>卫星通信</li>
</ul>
<h3 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h3><p>1.频分复用FDM(Frequency Division Multiplexing)</p>
<ul>
<li>频分复用的各路信号在同样时间占用不同的带宽资源</li>
</ul>
<p>2.时分复用TDM(Time Division Multiplexing)</p>
<ul>
<li>时分复用的所有用户是在不同的时间占用同样的频带宽度</li>
</ul>
<p>3.波分复用WDM(Wavelength Division Multiplexing)</p>
<ul>
<li>光的频分复用</li>
</ul>
<p>4.码分复用CDM(Code Division Multiplexing)</p>
<h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><p>1.ADSL(Asymmetric Digital Subscriber Line)技术</p>
<ul>
<li>用数字技术对现有模拟电话的用户线进行改造</li>
</ul>
<p>2.光纤同轴混合网HFC(Hybrid Fiber Coax)</p>
<p>3.FTTx技术</p>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a><strong>数据链路层</strong></h2><hr>
<p>数据链路层信道：</p>
<ul>
<li>点对点信道</li>
<li>广播信道</li>
</ul>
<h3 id="数据链路层的几个共同问题"><a href="#数据链路层的几个共同问题" class="headerlink" title="数据链路层的几个共同问题"></a>数据链路层的几个共同问题</h3><p>数据链路：在一条物理线路之上，通过一些规程或协议来控制这些数据的传输，以保证被传输数据的正确性；实现这些规程或协议的硬件和软件加到物理线路，这样就构成了数据链路。<br>帧：数据链路层的协议数据单元</p>
<p>三个基本问题：</p>
<ul>
<li>封装成帧</li>
<li>透明传输</li>
<li>差错检测</li>
</ul>
<h3 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h3><p>PPP - Point-to-Point Protocol</p>
<p>PPP协议组成：</p>
<ul>
<li>一个将IP数据报封装到串行链路的方法</li>
<li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP - Link Control Protocol</li>
<li>一套网络控制协议NCP - Network Control Protocol</li>
</ul>
<h3 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h3><p>共享信道方法：</p>
<ul>
<li>静态划分信道<ul>
<li>频分复用、时分复用、波分复用、码分复用</li>
</ul>
</li>
<li>动态媒体接入控制<ul>
<li>随机接入</li>
<li>受控接入</li>
</ul>
</li>
</ul>
<p>数据链路层拆分：</p>
<ul>
<li>逻辑链路控制LLC - Logical Link Control</li>
<li>媒体接入控制MAC - Medium Access Control</li>
</ul>
<p>CSMA&#x2F;CD协议：载波监听多点接入&#x2F;碰撞检测</p>
<ul>
<li>Carrier Sense Multiple Access with Collision Detection</li>
<li>多点接入：总线型网络，许多计算机以多点接入方式连接在一根总线上</li>
<li>载波监听：不管在想要发送数据之前，还是在发送数据之中，每个站都必须不停地检测信道</li>
<li>碰撞检测：适配器边发送数据边检测信道上的信号电压变化情况</li>
</ul>
<p>使用集线器的星形拓扑<br>集线器的一些特点：</p>
<ul>
<li>使用集线器的以太网在逻辑上仍是一个总线网，各站共享逻辑上的总线，使用的还是CSMA&#x2F;CD协议</li>
<li>一个集线器有许多端口</li>
<li>集线器工作在物理层，每个端口负责转发比特，不进行碰撞检测</li>
<li>集线器采用了专门芯片，进行自适应串音回波抵消</li>
</ul>
<p>以太网信道利用率：<br>参数α定义为以太网单程端到端时延τ与帧的发送时间T0之比：$\alpha&#x3D;\frac{\tau}{T_0}$<br>极限信道利用率Smax为：<br>$$S_{max}&#x3D;\frac{T_0}{T_0+\tau}&#x3D;\frac{1}{1+\alpha}$$</p>
<p>只有当参数α远小于1才能得到尽可能高的极限信道利用率</p>
<p>MAC层的硬件地址，硬件地址又称物理地址或MAC地址</p>
<h3 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h3><p>1.在物理层扩展以太网 - 集线器<br>2.在数据链路层扩展以太网 - 交换机<br>3.虚拟局域网 - VLAN(Virtual LAN)</p>
<ul>
<li>局域网给用户提供的一种服务，并不是一种新型的局域网</li>
</ul>
<h3 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h3><ul>
<li>100BASE-T 以太网</li>
<li>吉比特以太网</li>
<li>10吉比特以太网和更快的以太网</li>
<li>使用以太网进行宽带接入 - PPPoE(PPP over Ethernet)</li>
</ul>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><strong>网络层</strong></h2><hr>
<h3 id="网络层的几个重要概念"><a href="#网络层的几个重要概念" class="headerlink" title="网络层的几个重要概念"></a>网络层的几个重要概念</h3><p>网络层提供的两种服务：<br>1.虚电路服务<br>2.数据报服务</p>
<p>网络层的两个层面：<br>1.数据层面<br>2.控制层面</p>
<h3 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h3><p>IP地址及其表示方法<br>使用点分十进制记法可以提高可读性<br>IP地址 ::&#x3D; {&lt;网络号&gt;, &lt;主机号&gt;}</p>
<p>分类的IP地址</p>
<p><img src="/../images/%E5%88%86%E7%B1%BBIP%E5%9C%B0%E5%9D%80.svg" alt="分类IP地址"></p>
<p>无分类编址CIDR<br>CIDR - Classless Inter-Domain Routing – 无分类域间路由选择<br>IP地址 ::&#x3D; {&lt;网络前缀&gt;, &lt;主机号&gt;}<br>使用斜线记法，或称CIDR记法<br>地址掩码或称掩码，又称子网掩码<br>路由聚合<br>网络前缀越短的地址块所包含的地址数就越多</p>
<p>地址解析协议ARP</p>
<p>IP数据包的格式：</p>
<ol>
<li>版本</li>
<li>首部长度</li>
<li>区分服务</li>
<li>总长度</li>
<li>标识</li>
<li>标志</li>
<li>片偏移</li>
<li>生存时间</li>
<li>协议</li>
<li>首部检验和</li>
<li>源地址</li>
<li>目的地址</li>
<li>可选字段</li>
<li>填充</li>
<li>数据部分</li>
</ol>
<h3 id="IP层转发分组的过程"><a href="#IP层转发分组的过程" class="headerlink" title="IP层转发分组的过程"></a>IP层转发分组的过程</h3><p>1.基于终点的转发<br>2.最长前缀匹配<br>3.使用二叉线索查找转发表</p>
<h3 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h3><p>ICMP - Internet Control Message Protocol</p>
<p>ICMP报文种类：</p>
<ul>
<li>ICMP差错报告报文<ul>
<li>终点不可达</li>
<li>时间超过</li>
<li>参数问题</li>
<li>改变路由</li>
</ul>
</li>
<li>ICMP询问报文<ul>
<li>回送请求或回送回答</li>
<li>时间戳请求或时间戳回答</li>
</ul>
</li>
</ul>
<h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p>IPv6的基本首部：</p>
<ol>
<li>版本</li>
<li>通信量类</li>
<li>流标号</li>
<li>有效载荷长度</li>
<li>下一个首部</li>
<li>跳数限制</li>
<li>源地址</li>
<li>目的地址</li>
</ol>
<p>IPv6地址<br>在IPv6中，每个地址占128位，地址空间大于3.4*10^38.<br>IPv6使用冒号十六进制记法<br>零压缩：一连串连续的零可以为一对冒号所取代</p>
<p>从IPv4向IPv6过渡</p>
<ol>
<li>双协议栈</li>
<li>隧道技术</li>
</ol>
<p>ICMPv6</p>
<h3 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h3><p>几个基本概念<br>1.理想的路由算法</p>
<ul>
<li>算法必须是正确和完整的</li>
<li>算法在计算上应简单</li>
<li>算法应能适应通信量和网络拓扑的变化</li>
<li>算法应具有稳定性</li>
<li>算法应是公平的</li>
<li>算法应是最佳的</li>
</ul>
<p>2.分层次的路由选择协议<br>自治系统 – AS - autonomous system<br>域间路由选择：自治系统之间的路由选择<br>域内路由选择：自治系统内部的路由选择<br>路由选择策略：</p>
<ul>
<li>内部网关协议IGP<ul>
<li>RIP</li>
<li>OSPF</li>
</ul>
</li>
<li>外部网关协议EGP</li>
</ul>
<p><strong>内部网关协议RIP</strong><br>RIP - Routing Information Protocol</p>
<ul>
<li>一种分布式的基于距离向量的路由选择协议</li>
</ul>
<p>协议RIP特点：</p>
<ul>
<li>仅和相邻路由器交换信息</li>
<li>交换当前路由表</li>
<li>按固定的时间间隔交换路由信息</li>
</ul>
<p>坏消息传播得慢：当网络出现故障时，要经过比较长的时间才能将此信息传送到所有路由器<br>协议RIP优点：实现简单，开销较小</p>
<p><strong>内部网关协议OSPF</strong><br>OSPF - Open Shortest Path First – 开放最短路径优先</p>
<ul>
<li>使用链路状态协议(link state protocol)</li>
</ul>
<p>协议OSPF特点：</p>
<ul>
<li>向本自治系统中所有路由器发送信息（洪泛法）</li>
<li>发送信息是与本路由器相邻的所有路由器的链路状态</li>
<li>链路状态变化或每隔一段时间，路由器向所有路由器用洪泛法发送链路状态信息</li>
</ul>
<p>OSPF五种分组类型：</p>
<ul>
<li>问候分组</li>
<li>数据库描述分组</li>
<li>链路状态请求分组</li>
<li>链路状态更新分组</li>
<li>链路状态确认分组</li>
</ul>
<p><strong>外部网关协议BGP</strong><br>BGP-4：使用路径向量路由选择协议<br>两点原因：</p>
<ul>
<li>互联网的规模太大，使得自治系统AS之间路由选择非常困难</li>
<li>自治系统AS之间的路由选择必须考虑有关策略</li>
</ul>
<p>三种不同自治系统AS:</p>
<ul>
<li>末梢AS</li>
<li>穿越AS</li>
<li>对等AS</li>
</ul>
<p>BGP路由选择：</p>
<ul>
<li>本地偏好</li>
<li>AS跳数最少</li>
<li>热土豆路由选择算法</li>
<li>BGP标识符数值最小的路由</li>
</ul>
<p>BGP四种报文：</p>
<ul>
<li>打开报文</li>
<li>更新报文</li>
<li>保活报文</li>
<li>通知报文</li>
</ul>
<p>路由器的构成<br>1.路由器的结构：</p>
<ul>
<li>路由选择部分<ul>
<li>路由选择处理机</li>
</ul>
</li>
<li>分组转发部分<ul>
<li>交换结构</li>
<li>输入端口</li>
<li>输出端口</li>
</ul>
</li>
</ul>
<p>2.交换结构：<br>三种交换方法：</p>
<ul>
<li>通过存储器</li>
<li>通过总线</li>
<li>通过互连网络</li>
</ul>
<h3 id="IP多播"><a href="#IP多播" class="headerlink" title="IP多播"></a>IP多播</h3><p>网际组管理协议IGMP - Internet Group Management Protocol</p>
<p>多播路由选择协议<br>转发多播数据报使用的三种方法：</p>
<ul>
<li>洪泛与剪除</li>
<li>隧道技术</li>
<li>基于核心的发现技术</li>
</ul>
<h3 id="虚拟专用网VPN-amp-网络地址转换NAT"><a href="#虚拟专用网VPN-amp-网络地址转换NAT" class="headerlink" title="虚拟专用网VPN &amp; 网络地址转换NAT"></a>虚拟专用网VPN &amp; 网络地址转换NAT</h3><h3 id="多协议标签交换MPLS"><a href="#多协议标签交换MPLS" class="headerlink" title="多协议标签交换MPLS"></a>多协议标签交换MPLS</h3><p>MPLS - MultiProtocol Label Switching</p>
<p>MPLS没有取代IP，作为一种IP增强技术<br>MPLS三个特点：</p>
<ul>
<li>支持面向连接的服务质量</li>
<li>支持流量工程，均衡网络负载</li>
<li>有效地支持虚拟专用网VPN</li>
</ul>
<p>转发等价类FEC - Forwarding Equivalence Class</p>
<p>MPLS首部格式：</p>
<ul>
<li>标签值</li>
<li>试验</li>
<li>S（栈）</li>
<li>生存时间TTL</li>
</ul>
<h3 id="软件定义网络SDN"><a href="#软件定义网络SDN" class="headerlink" title="软件定义网络SDN"></a>软件定义网络SDN</h3><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a><strong>运输层</strong></h2><hr>
<h3 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h3><p>运输层提供应用进程间的逻辑通信<br>网络层为主机之间的通信提供服务，而运输层则在网络层的基础上，为应用进程之间的通信提供服务。<br>运输层两个主要协议：</p>
<ul>
<li>用户数据报协议UDP(User Datagram Protocol)</li>
<li>传输控制协议TCP(Transmission Control Protocol)</li>
</ul>
<p>在协议栈层间的抽象的协议端口是软件端口，软件端口是应用层的各种协议进程与运输实体进行层间交互的地点。<br>端口号只具有本地意义，它标志本计算机应用层中的各个进程在和运输层交互时的层间接口。<br>运输层的端口号分为两大类：</p>
<ul>
<li>服务器使用的端口号<ul>
<li>熟知端口号或全球通用端口号，数值为0~1023</li>
<li>登记端口号，数值为1024~49151</li>
</ul>
</li>
<li>客户端使用的端口号<ul>
<li>客户进程运行时动态选择，即短暂端口号，数值为49152~65535</li>
</ul>
</li>
</ul>
<h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><p>UDP只在IP的数据报服务之上增加了很少一点功能，这就是复用和分用的功能以及差错检测的功能。<br>UDP特点：</p>
<ul>
<li>UDP是无连接的</li>
<li>UDP尽最大努力交付</li>
<li>UDP是面向报文的</li>
<li>UDP没有拥塞控制</li>
<li>UDP支持一对一、一对多、多对一和多对多的交互通信</li>
<li>UDP的首部开销小</li>
</ul>
<p>UDP首部格式：</p>
<ul>
<li>源端口</li>
<li>目的端口</li>
<li>长度</li>
<li>检验和</li>
</ul>
<h3 id="传输控制协议TCP概述"><a href="#传输控制协议TCP概述" class="headerlink" title="传输控制协议TCP概述"></a>传输控制协议TCP概述</h3><p>TCP特点：</p>
<ul>
<li>TCP是面向连接的运输层协议</li>
<li>TCP连接是点对点通信</li>
<li>TCP提供可靠交付服务</li>
<li>TCP提供全双工通信</li>
<li>TCP是面向字节流的</li>
</ul>
<p>TCP连接的端点叫作套接字或插口</p>
<blockquote>
<p>套接字socket &#x3D; (IP地址：端口号)</p>
</blockquote>
<p>每一条TCP连接唯一地被通信两端的两个端点所确定，即：</p>
<blockquote>
<p>TCP连接 ::&#x3D; {socket1, socket2} &#x3D; {(IP1:port1), (IP2:port2)}</p>
</blockquote>
<h3 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h3><ol>
<li>停止等待协议</li>
<li>连续ARQ协议</li>
<li>滑动窗口协议</li>
</ol>
<h3 id="TCP报文段首部格式"><a href="#TCP报文段首部格式" class="headerlink" title="TCP报文段首部格式"></a>TCP报文段首部格式</h3><p>首部固定部分各字段：</p>
<ul>
<li>源端口和目的端口</li>
<li>序号</li>
<li>确认号</li>
<li>数据偏移</li>
<li>保留</li>
<li>紧急URG</li>
<li>确认ACK</li>
<li>推送PUSH</li>
<li>复位RST</li>
<li>同步SYN</li>
<li>终止FIN</li>
<li>窗口</li>
<li>检验和</li>
<li>紧急指针</li>
<li>选项</li>
</ul>
<h3 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h3><ol>
<li>以字节为单位的滑动窗口</li>
<li>超时重传时间的选择</li>
<li>选择确认SACK</li>
</ol>
<h3 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h3><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收。<br>发送方的发送窗口不能超过接收方给出的接收窗口的数值。</p>
<h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>拥塞：在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。<br>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。<br>TCP拥塞控制算法四种：</p>
<ul>
<li>慢开始</li>
<li>拥塞避免</li>
<li>快重传</li>
<li>快恢复</li>
</ul>
<p>主动队列管理AQM</p>
<h3 id="TCP运输连接管理"><a href="#TCP运输连接管理" class="headerlink" title="TCP运输连接管理"></a>TCP运输连接管理</h3><p>运输连接三个阶段：</p>
<ul>
<li>连接建立</li>
<li>数据传送</li>
<li>连接释放</li>
</ul>
<p>TCP的连接建立</p>
<p><img src="/../images/%E4%B8%89%E6%8A%A5%E6%96%87%E6%8F%A1%E6%89%8B.png" alt="三报文握手"></p>
<p>Q:为什么A最后还要发送一次确认呢？<br>A:这主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。</p>
<p>TCP的连接释放</p>
<p><img src="/../images/%E5%9B%9B%E6%8A%A5%E6%96%87%E6%8C%A5%E6%89%8B.jpg" alt="四报文挥手"></p>
<p>Q:为什么A在TIME-WAIT状态必须等待2MSL的时间呢？<br>A:1.为了保证A发送的最后一个ACK报文能够到达B;<br>  2.防止“已失效的连接请求报文段”出现在本连接中。</p>
<p>TCP的有限状态机</p>
<p><img src="/../images/tcp%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.jpg" alt="四报文挥手"></p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><strong>应用层</strong></h2><hr>
<h3 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h3><p>DNS - Domain Name System</p>
<ul>
<li>dns能够把互联网上的主机名字转换位IP地址</li>
</ul>
<p>互联网的域名结构<br>域可以划分子域，子域可以继续划分，这样就形成了顶级域、二级域、三级域等等<br>每一个域名都由标号序列组成，而各标号之间用点隔开<br>每个标号不超过63个字符，也不区分大小写字母<br>由多个标号组成的完整域名总共不超过255个字符<br>顶级域名共分为三类：</p>
<ul>
<li>国家顶级域名nTLD</li>
<li>通用顶级域名gTLD</li>
<li>基础结构域名<ul>
<li>arpa又称反向域名</li>
</ul>
</li>
</ul>
<p>我国把二级域名划分成两大类：</p>
<ul>
<li>类别域名7个<ul>
<li>ac – 科研机构</li>
<li>com – 工、商、金融等企业</li>
<li>edu – 中国的教育机构</li>
<li>gov – 中国的政府机构</li>
<li>mil – 中国的国防机构</li>
<li>net – 提供互连网络服务的机构</li>
<li>org – 非营利性的组织</li>
</ul>
</li>
<li>行政区域名34个</li>
</ul>
<p>域名服务器<br>1.划分四种不同类型：</p>
<ul>
<li>根域名服务器</li>
<li>顶级域名服务器</li>
<li>权限域名服务器</li>
<li>本地域名服务器</li>
</ul>
<p>2.域名解析过程：</p>
<ul>
<li>递归查询</li>
<li>迭代查询</li>
</ul>
<h3 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h3><p>FTP - File Transfer Protocol</p>
<p>NFS - Network File System – 网络文件系统</p>
<p>TFTP - Trivial File Transfer Protocol – 简单文件传送协议</p>
<h3 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h3><p>NVT - Network Virtual Terminal – 网络虚拟终端</p>
<h3 id="万维网WWWW"><a href="#万维网WWWW" class="headerlink" title="万维网WWWW"></a>万维网WWWW</h3><p>WWWW - World Wide Web – 大规模的、联机式的信息储藏所</p>
<p>万维网是一个分布式的超媒体系统，它是超文本系统的扩充。<br>超文本是指包含指向其他文档链接的文本。<br>超媒体与超文本的区别是文档内容不同。超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画以及视频图像等。<br>万维网以客户服务器方式工作。客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档。</p>
<p>统一资源定位符URL<br>URL格式</p>
<blockquote>
<p>协议:&#x2F;&#x2F;主机名:端口&#x2F;路径<br>“:端口”可省略</p>
</blockquote>
<p>使用http的url<br>省略“:端口”：</p>
<blockquote>
<p>http:&#x2F;&#x2F;主机名&#x2F;路径</p>
</blockquote>
<p>超文本传输协议HTTP</p>
<p>HTTP协议标准：</p>
<ul>
<li>HTTP&#x2F;1.0</li>
<li>HTTP&#x2F;1.1</li>
<li>HTTP&#x2F;2</li>
</ul>
<p><a href="https://vue3js.cn/interview/http/1.0_1.1_2.0.html#%E4%B8%80%E3%80%81http1-0">面试官：说说 HTTP1.0&#x2F;1.1&#x2F;2.0 的区别?</a></p>
<p>HTTP报文结构<br>1.类型：</p>
<ul>
<li>请求报文</li>
<li>响应报文</li>
</ul>
<p>2.组成：</p>
<ul>
<li>开始行<ul>
<li>请求行（请求报文中）</li>
<li>状态行（响应报文中）</li>
</ul>
</li>
<li>首部行</li>
<li>实体主体</li>
</ul>
<p>状态码分为5大类：</p>
<ul>
<li>1xx – 通知信息</li>
<li>2xx – 成功</li>
<li>3xx – 重定向</li>
<li>4xx – 客户的差错</li>
<li>5xx – 服务器的差错</li>
</ul>
<h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>电子邮件系统由三部分组件构成：</p>
<ul>
<li>用户代理</li>
<li>邮件服务器</li>
<li>邮件发送协议（如SMTP）&amp; 邮件读取协议（如POP3）</li>
</ul>
<p><img src="/../images/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E7%9A%84%E6%9C%80%E4%B8%BB%E8%A6%81%E7%9A%84%E7%BB%84%E6%88%90%E6%9E%84%E4%BB%B6.jpg" alt="电子邮件构成"></p>
<p>简单邮件传送协议SMTP</p>
<p>邮件读取协议POP3 &amp; IMAP</p>
<center><font color=#F78A52>IMAP & POP3的主要功能比较</font></center>

<table>
<thead>
<tr>
<th>操作位置</th>
<th>操作内容</th>
<th>IMAP</th>
<th>POP3</th>
</tr>
</thead>
<tbody><tr>
<td>收件箱</td>
<td>阅读、标记、移动、删除邮件等</td>
<td>客户端与邮箱更新同步</td>
<td>仅在客户端内</td>
</tr>
<tr>
<td>发件箱</td>
<td>保存到已发送</td>
<td>客户端与邮箱更新同步</td>
<td>仅在客户端内</td>
</tr>
<tr>
<td>创建文件夹</td>
<td>新建自定义的文件夹</td>
<td>客户端与邮箱更新同步</td>
<td>仅在客户端内</td>
</tr>
<tr>
<td>草稿</td>
<td>保存草稿</td>
<td>客户端与邮箱更新同步</td>
<td>仅在客户端内</td>
</tr>
<tr>
<td>垃圾文件夹</td>
<td>接收并移入垃圾文件夹的邮件</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>广告邮件</td>
<td>接收并移入广告邮件夹的邮件</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p> 通用互联网邮件扩充MIME</p>
<h3 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h3><p> DHCP - Dynamic Host Configuration Protocol</p>
<ul>
<li>提供一种机制，称为即插即用连网</li>
<li>这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与</li>
</ul>
<h3 id="简单网络管理协议SNMP"><a href="#简单网络管理协议SNMP" class="headerlink" title="简单网络管理协议SNMP"></a>简单网络管理协议SNMP</h3><p>SNMP - Simple Network Management Protocol<br>SNMP网络管理三部分组成：</p>
<ul>
<li>SNMP本身</li>
<li>管理信息结构SMI</li>
<li>管理信息库MIB</li>
</ul>
<h3 id="应用进程跨越网络的通信"><a href="#应用进程跨越网络的通信" class="headerlink" title="应用进程跨越网络的通信"></a>应用进程跨越网络的通信</h3><ol>
<li>系统调用 &amp; 应用编程接口</li>
<li>几种常用的系统调用</li>
</ol>
<h3 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h3><p>1.具有集中目录服务器的P2P工作方式<br>2.具有全分布式结构的P2P文件共享程序</p>
]]></content>
      <categories>
        <category>four fundamental computer technology</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
</search>
